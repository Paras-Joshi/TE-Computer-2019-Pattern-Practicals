JAVA File 
import java.util.Scanner; 
public class JNI { 
public native void JniAdd(int no1,int no2); 
public native void JniSub(int no1,int no2); 
public native void JniMult(int no1,int no2); 
public native void JniDiv(double no1,double no2); 
public native void JniPow(int no1,int no2); 
public native void JniSqrt(int no1); 
public native void JniMod(int no1,int no2); 
static { System.load("C:\\Users\\Bhushan 
Kadam\\Desktop\\Practical\\LP1\\DLL\\libJNI.dll");} 
public static void main(String[] args)throws Exception { 
int no1,no2; 
Scanner in =new Scanner(System.in); 
JNI MJ=new JNI(); 
System.out.println("JNI using C"); 
System.out.print("Enter first number: "); 
no1=in.nextInt(); 
double no1f=no1; 
System.out.print("Enter second number: "); 
no2=in.nextInt(); 
MJ.JniAdd(no1,no2); 
MJ.JniSub(no1,no2); 
MJ.JniMult(no1,no2); 
MJ.JniDiv((double)no1,(double)no2); 
MJ.JniPow(no1,no2); 
MJ.JniSqrt(no2); 
MJ.JniMod(no1,no2); 
} 
}



C file_JNI.c 
#include <JNI.h> //file required to use JNI functions
#include<math.h> 
#define PI 3.14159265 

//Each function is declared using JNIEXPORT and JNICALL, which are macros used to ensure the proper calling convention.
JNIEXPORT void JNICALL Java_JNI_JNI_JniAdd 
(JNIEnv *e, jobject obj, jint no1, jint no2) 
//JNIEnv *e: Pointer to the JNI environment, which provides functions to interact with the JVM.
//jobject obj: Reference to the Java object calling this native method
{ 
int add=no1+no2; 
printf("Addition of nos.= %d",add); 
} 
JNIEXPORT void JNICALL Java_JNI_JNI_JniSub 
(JNIEnv *e, jobject obj, jint no1, jint no2) 
{ 
int sub=no1-no2; 
printf("\nSubtraction of nos. is= %d",sub); 
} 
//In this code, Java_JNI_JNI_JniAdd means the method is defined in the JNI package, the JNI class, and the JniAdd method.
JNIEXPORT void JNICALL Java_JNI_JNI_JniMult 
(JNIEnv *e, jobject obj, jint no1, jint no2) 
{ 
int mult=no1*no2; 
printf("\nMultiplication of nos. is= %d",mult); 
} 
JNIEXPORT void JNICALL Java_JNI_JNI_JniDiv 
(JNIEnv *e, jobject obj, jdouble no1, jdouble no2) 
{ 
double div=no1/no2; 
printf("\nDivision of nos. is= %.3f",div); 
} 
JNIEXPORT void JNICALL Java_JNI_JNI_JniMod 
(JNIEnv *e, jobject obj, jint no1, jint no2) 
{ 
printf("\nRemainder is= %.3f",fmod(no1,no2)); 
} 
JNIEXPORT void JNICALL Java_JNI_JNI_JniPow 
(JNIEnv *e, jobject obj, jint no1, jint no2) 
{ 
printf("\nPower is= %.3f",pow(no1,no2)); 
} 
JNIEXPORT void JNICALL Java_JNI_JNI_JniSqrt 
(JNIEnv *e, jobject obj, jint no1) 
{ 
printf("\nSquare root %d is= %.3f",no1,sqrt(no1)); 
}



C File_JNI.h 
/* DO NOT EDIT THIS FILE - it is machine generated */ 
#include <jni.h> 
/* Header for class JNI_JNI */ 
#ifndef _Included_JNI_JNI 
#define _Included_JNI_JNI 
#ifdef cplusplus 
extern "C" { 
#endif 
/* 
* Class: JNI_JNI 
* Method: JniAdd 
* Signature: (II)V 
*/ 
JNIEXPORT void JNICALL Java_JNI_JNI_JniAdd 
(JNIEnv *, jobject, jint, jint); 
/* 
* Class: JNI_JNI 
* Method: JniSub 
* Signature: (II)V 
*/ 
JNIEXPORT void JNICALL Java_JNI_JNI_JniSub 
(JNIEnv *, jobject, jint, jint); 
/* 
* Class: JNI_JNI 
* Method: JniMult 
* Signature: (II)V 
*/ 
JNIEXPORT void JNICALL Java_JNI_JNI_JniMult 
(JNIEnv *, jobject, jint, jint); 
/* 
* Class: JNI_JNI 
* Method: JniDiv 
* Signature: (II)V 
*/ 
JNIEXPORT void JNICALL Java_JNI_JNI_JniDiv 
(JNIEnv *, jobject, jdouble, jdouble); 
/* 
* Class: JNI_JNI 
* Method: JniPow 
* Signature: (II)V 
*/ 
JNIEXPORT void JNICALL Java_JNI_JNI_JniPow 
(JNIEnv *, jobject, jint, jint); 
/* 
* Class: JNI_JNI 
* Method: JniSqrt 
* Signature: (I)V 
*/ 
JNIEXPORT void JNICALL Java_JNI_JNI_JniSqrt 
(JNIEnv *, jobject, jint); 
/* 
* Class: JNI_JNI 
* Method: JniMod 
* Signature: (II)V 
*/ 
JNIEXPORT void JNICALL Java_JNI_JNI_JniMod 
(JNIEnv *, jobject, jint, jint); 
#ifdef cplusplus 
} 
#endif 
#endif