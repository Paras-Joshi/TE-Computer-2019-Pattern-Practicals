package package3;
import java.util.*;
public class Pr7_3 {
//  Least Recently Used (LRU)	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		ArrayList<Integer> list = new ArrayList<>();
		int noofpages, capacity, hit=0, fault = 0, index=0;
		double hitRatio, faultRatio;
		boolean isFull = false;
		System.out.println("\n Enter Total No of Pages : ");
		noofpages = sc.nextInt();
		System.out.println("\n Enter Capacity of Frame : ");
		capacity = sc.nextInt();
		int pages[] = new int[noofpages];
		int frame[] = new int[capacity];
		int table[][] = new int[noofpages][capacity];
		System.out.println("\n Enter Pages : ");
		for(int i = 0; i < noofpages;i++) {
			pages[i] = sc.nextInt();
		}
		for(int i = 0;i < capacity;i++) {
			frame[i] = -1;
		}
		System.out.println("----------------------------------------------------------------------");
		for(int i = 0;i < noofpages;i++) {
			if(list.contains(pages[i])) {
				list.remove((Integer)pages[i]);
			}
			list.add(pages[i]);
			int search = -1;// The value of search serves as a flag to indicate whether the page is already in memory.
			for(int j =0;j < capacity;j++) {
				if(frame[j] == pages[i]) {
					hit++;
					search = j;
					System.out.printf("%3s","H"); 
					 break;
				}
			}
			if(search==-1)
			{
				if(isFull) { //If the frame is full (isFull is true): It finds the least recently used page in memory and replaces it with the new page.
					int min_loc = noofpages;
					for(int j = 0;j < capacity;j++) {
						if(list.contains(frame[j])) {
							int temp = list.indexOf(frame[j]);
							if(temp < min_loc) {
								min_loc = temp;
								index = j;
							}
						}
					}
				}
				frame[index] = pages[i]; // If the frame is not full (isFull is false): It simply adds the new page in the next available slot.
				fault++;
				System.out.printf("%3s","F"); 
				index++;
				if(index == capacity) {
					index = 0;
					isFull = true;
				}
			}
			System.arraycopy(frame, 0, table[i], 0, capacity); // The current state of frame is copied into table[i], preserving it for later display.
		}
		System.out.println("\n----------------------------------------------------------------------"); 
		 for (int i = 0; i < capacity; i++) { 
		 for (int j = 0; j < noofpages; j++) 
		 System.out.printf("%3d ", table[j][i]); 
		 System.out.println(); 
		 } 
		 
		 System.out.println("----------------------------------------------------------------------"); 
		 hitRatio = ((double)hit / noofpages) * 100; 
		 faultRatio = ((double)fault / noofpages) * 100; 
		 System.out.println("Page Fault: " + fault + "\nPage Hit: " + hit); 
		 System.out.printf("Hit Ratio:%.2f \nFault Ratio:%.2f ", hitRatio, faultRatio);
	}

}
