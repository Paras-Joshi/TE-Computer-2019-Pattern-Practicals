package package3;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;

class TableRow {
	String symbol;
	int address;
	int index;

	public TableRow(String symbol, int address) {
		super();
		this.symbol = symbol;
		this.address = address;

	}

	public TableRow(String symbol, int address, int index) {
		super();
		this.symbol = symbol;
		this.address = address;
		this.index = index;

	}

	public int getIndex() {
		return index;
	}

	public void setIndex(int index) {
		this.index = index;
	}

	public String getSymbol() {
		return symbol;
	}

	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}

	public int getAddress() {
		return address;
	}

	public void setAddress(int address) {
		this.address = address;
	}

}

public class Pass_2 {
	ArrayList<TableRow> SYMTAB, LITTAB;

	public Pass_2() {
		SYMTAB = new ArrayList<>();
		LITTAB = new ArrayList<>();
	}

	public static void main(String[] args) {
		Pass_2 pass2 = new Pass_2();

		try {
			pass2.generateCode("C:\\Users\\admin\\eclipse-workspace\\Project2\\src\\package3\\pass2\\IC.txt");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void readtables() {
		BufferedReader br;
		String line;
		try {
			br = new BufferedReader(new FileReader("C:\\Users\\admin\\eclipse-workspace\\Project2\\src\\package3\\pass2\\SYMTAB.txt"));
			while ((line = br.readLine()) != null) {
				String parts[] = line.split("\\s+");
				SYMTAB.add(new TableRow(parts[1], Integer.parseInt(parts[2]), Integer.parseInt(parts[0])));
			}
			br.close();
			br = new BufferedReader(new FileReader("C:\\Users\\admin\\eclipse-workspace\\Project2\\src\\package3\\pass2\\LITTAB.txt"));
			while ((line = br.readLine()) != null) {
				String parts[] = line.split("\\s+");
				LITTAB.add(new TableRow(parts[1], Integer.parseInt(parts[2]), Integer.parseInt(parts[0])));
			}
			br.close();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
//The generateCode method processes intermediate code (IC) to produce a machine-level output.
	public void generateCode(String filename) throws Exception {
		readtables();
		BufferedReader br = new BufferedReader(new FileReader(filename));// to read an intermediate code file specified by filename

		BufferedWriter bw = new BufferedWriter(new FileWriter("C:\\Users\\admin\\eclipse-workspace\\Project2\\src\\package3\\pass2\\PASS2.txt"));
		String line, code;
		
		while ((line = br.readLine()) != null) {
			String parts[] = line.split("\\s+");
			//If a line contains AD or DL,02, it is ignored, and a newline is written to PASS2.txt.
			if (parts[0].contains("AD") || parts[0].contains("DL,02")) {
				bw.write("\n");
				continue;
			} else if (parts.length == 2) {
				if (parts[0].contains("DL")) {
					//When DL,01 (a DC directive for defining constants) is encountered:
					//Extract the constant value from the second part.
					//Generate machine code as 00 0 XXX (where XXX is the constant formatted as a three-digit number).
					parts[0] = parts[0].replaceAll("[^0-9]", "");
					if (Integer.parseInt(parts[0]) == 1) {
						int constant = Integer.parseInt(parts[1].replaceAll("[^0-9]", ""));
						code = "00\t0\t" + String.format("%03d", constant) + "\n";
						bw.write(code);

					}
				} else if (parts[0].contains("IS")) {
					int opcode = Integer.parseInt(parts[0].replaceAll("[^0-9]", ""));
					if (opcode == 10) {
						if (parts[1].contains("S")) {//check whether the operand references SYMTAB (denoted by S)
							int symIndex = Integer.parseInt(parts[1].replaceAll("[^0-9]", ""));
							//Fetch the corresponding address from SYMTAB
							code = String.format("%02d", opcode) + "\t0\t" + String.format("%03d", SYMTAB.get(symIndex - 1).getAddress()) + "\n";
							bw.write(code);
							
						} else if (parts[1].contains("L")) {//LITTAB
							int symIndex = Integer.parseInt(parts[1].replaceAll("[^0-9]", ""));
							code = String.format("%02d", opcode) + "\t0\t"
									+ String.format("%03d", LITTAB.get(symIndex - 1).getAddress()) + "\n";//Fetch the corresponding address from LITTAB format the machine code as XX 0 YYY, where XX is the opcode and YYY is the address.
							bw.write(code);
						}

					}
				}
			} else if (parts.length == 1 && parts[0].contains("IS")) {//For instructions that don't have operands, generate code as XX 0 000.
				int opcode = Integer.parseInt(parts[0].replaceAll("[^0-9]", ""));
				code = String.format("%02d", opcode) + "\t0\t" + String.format("%03d", 0) + "\n";
				bw.write(code);
			} else if (parts[0].contains("IS") && parts.length == 3) // IS instructions with register and operand (e.g., IS,X,Y):
			{
				int opcode = Integer.parseInt(parts[0].replaceAll("[^0-9]", ""));
				//Fetch the corresponding address and format the code as XX R YYY, where XX is the opcode, R is the register code, and YYY is the address.
				int regcode = Integer.parseInt(parts[1]);

				if (parts[2].contains("S")) {
					int symIndex = Integer.parseInt(parts[2].replaceAll("[^0-9]", ""));
					code = String.format("%02d", opcode) + "\t" + regcode + "\t"
							+ String.format("%03d", SYMTAB.get(symIndex - 1).getAddress()) + "\n";
					bw.write(code);
				} else if (parts[2].contains("L")) {
					int symIndex = Integer.parseInt(parts[2].replaceAll("[^0-9]", ""));
					code = String.format("%02d", opcode) + "\t" + regcode + "\t"
							+ String.format("%03d", LITTAB.get(symIndex - 1).getAddress()) + "\n";
					bw.write(code);
				}
			}
		}
		bw.close();
		br.close();
	}
	//String.format("%02d", opcode) : Formats the opcode as a two-digit number.
	//String.format("%03d", constant/address): Formats the constant or address as a three-digit number.
}

